# -*- coding: utf-8 -*-
"""CovidAnonimizado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CE5wGf7XNRVEPST8-uSLpxh2CKuL3Snu
"""

import pandas as pd
import time
from sklearn.feature_extraction import FeatureHasher

#Faz a leitura do arquivo
dados = pd.read_csv('https://raw.githubusercontent.com/lpgarcia18/covid_florianopolis/master/dados/covid_anonimizado.csv')
dados.shape

#Seleciona as colunas que contém informações
print(dados.isnull().sum().where(lambda x: x < len(dados)).dropna().index)

#Faz o primeiro filtro de colunas
colunas = ['Município de notificação', 'CBO', 'País de origem', 'Sexo',
       'UF de residência', 'Municipio de residencia', 'Bairro',
       'Data da notificação', 'Data do início dos sintomas',
       'Resultado do teste', 'Data liberação do resultado', 'Tipo de exame',
       'Unidade notificadora', 'Unidade de referência', 'Equipe de referência',
       'ID', 'IDADE']
meusDados = dados[colunas]
meusDados.shape

#Altera o NaN para missing
meusDados = meusDados.fillna('missing')
meusDados.head()

#Totaliza os dados da coluna 'Resultado do Teste'
meusDados.groupby("Resultado do teste").size()

#Faz um sumário dos dados de todas colunas
for coluna in meusDados.columns:
  print('Coluna: ', coluna)
  print(meusDados[coluna].value_counts())
  print('')

#Faz o segundo filtro de colunas
colunas = ['ID', 'Sexo', 'Bairro', 'Data da notificação', 'Data do início dos sintomas', 
           'Resultado do teste', 'Tipo de exame', 'Unidade notificadora', 'Unidade de referência', 
           'Equipe de referência', 'IDADE']
meusDados = meusDados[colunas]
meusDados.head()

#Renomeia o nome das colunasPredição
meusDados = meusDados.rename(columns={'Data da notificação': 'Data_da_notificacao', 
                                      'Data do início dos sintomas': 'Data_dos_sintomas',
                                      'Resultado do teste': 'Resultado_do_teste', 
                                      'Tipo de exame': 'Tipo_do_exame', 
                                      'Unidade notificadora': 'Unidade_notificadora',
                                      'Unidade de referência': 'Unidade_de_referencia', 
                                      'Equipe de referência': 'Equipe_de_referencia', 
                                      'IDADE': 'Idade'})
meusDados.head()

#Totaliza os dados da coluna 'Resultado do teste' por Bairro
meusDados.query('Resultado_do_teste == "confirmado"')['Bairro'].value_counts()

#Mostra uma breve descrição dos dados do Bairro
meusDados['Bairro'].describe()

#Totaliza os dados da coluna 'Resultado do teste' por Unidade de referencia
meusDados.query('Resultado_do_teste == "confirmado"')['Unidade_de_referencia'].value_counts()

#Para os casos de 'missing', altera a 'Data dos sintomas' para a 'Data da notificação' 
meusDados.loc[meusDados['Data_dos_sintomas'] == 'missing', ['Data_dos_sintomas']] = meusDados.Data_da_notificacao
meusDados['Data_dos_sintomas'].value_counts()

#Transforma str para date
meusDados['Data_dos_sintomas'] = pd.to_datetime(meusDados['Data_dos_sintomas'], errors='coerce')
meusDados['Data_da_notificacao'] = pd.to_datetime(meusDados['Data_da_notificacao'])

#Para os casos de data inconsistente, altera a 'Data dos sintomas' para a 'Data da notificação' 
meusDados.loc[meusDados['Data_dos_sintomas'] > meusDados['Data_da_notificacao'], ['Data_dos_sintomas']] = meusDados.Data_da_notificacao
meusDados['Data_dos_sintomas'] = pd.to_datetime(meusDados['Data_dos_sintomas'], errors='coerce')
meusDados.query('Data_dos_sintomas > Data_da_notificacao').shape

#Exclui casos que não conseguiu converter a data
meusDados = meusDados.dropna(subset=['Data_dos_sintomas'])

###Faz a totalização dos casos confirmados por Bairro ###
confirmadosPorBairro = meusDados[['Bairro', 'Data_dos_sintomas', 'Resultado_do_teste']].query('Resultado_do_teste == "confirmado"')
confirmadosPorBairro = pd.merge(meusDados, confirmadosPorBairro, how='left', on=['Bairro', 'Bairro'], suffixes=('_t1', '_t2'))

print(confirmadosPorBairro.shape)
confirmadosPorBairro.head()

confirmadosPorBairro['Diferenca_dias_sintomas'] = (confirmadosPorBairro['Data_dos_sintomas_t1'] - confirmadosPorBairro['Data_dos_sintomas_t2']).dt.days
confirmadosPorBairro = confirmadosPorBairro[(confirmadosPorBairro.Diferenca_dias_sintomas >= 0) & (confirmadosPorBairro.Diferenca_dias_sintomas <= 14)]

confirmadosPorBairro.head()

confirmados14Dias = confirmadosPorBairro.groupby(['ID']).size()
confirmados14Dias

###Faz a totalização dos casos descartados por Bairro ###
descartadosPorBairro = meusDados[['Bairro', 'Data_dos_sintomas', 'Resultado_do_teste']].query('Resultado_do_teste == "descartado"')
descartadosPorBairro = pd.merge(meusDados, descartadosPorBairro, how='left', on=['Bairro', 'Bairro'], suffixes=('_t1', '_t2'))

print(descartadosPorBairro.shape)
descartadosPorBairro.head()

descartadosPorBairro['Diferenca_dias_sintomas'] = (descartadosPorBairro['Data_dos_sintomas_t1'] - descartadosPorBairro['Data_dos_sintomas_t2']).dt.days
descartadosPorBairro = descartadosPorBairro[(descartadosPorBairro.Diferenca_dias_sintomas >= 0) & (descartadosPorBairro.Diferenca_dias_sintomas <= 14)]

descartadosPorBairro.head()

descartados14Dias = descartadosPorBairro.groupby(['ID']).size()
descartados14Dias

###Junta os dados na tabela original ###
df = pd.merge(meusDados, confirmados14Dias.to_frame(), how='left', on=['ID', 'ID'])
df = pd.merge(df, descartados14Dias.to_frame(), how='left', on=['ID', 'ID'])
df.head()
df.shape

df = df.rename(columns={'0_x': 'Confirmados_bairro_14dias'})
df = df.rename(columns={'0_y': 'Descartados_bairro_14dias'})
df.query('Bairro == "ingleses"').sort_values(by=['Data_dos_sintomas', 'Data_da_notificacao']).head(5)
    
#Transforma 'Data dos sintomas' em timestamp
df['Data_dos_sintomas'].isnull().sum()
df['Data_dos_sintomas'] = df['Data_dos_sintomas'].apply(lambda x: int(time.mktime(x.timetuple())))

#Exclui registros com idade 'missing'
df = df.drop(df[df.Idade == 'missing'].index)

# Formata a Idade com duas casas decimais
df['Idade'] = df['Idade'].map('{:,.2f}'.format)

#Exclui registros com Sexo 'missing'
df = df.drop(df[df.Sexo == 'missing'].index)

#Transforma Sexo em código
df['Sexo'] = df['Sexo'].apply(lambda x: '0' if (x == 'f') else '1')

#Transforma Bairro em código
df['Bairro'] = df['Bairro'].astype('category')
df['Codigo_bairro'] = df['Bairro'].cat.codes

#Transforma Bairro em hash
fh = FeatureHasher(n_features=10, input_type='string')
hashBairro = fh.fit_transform(df['Bairro'])
dfBairro = pd.DataFrame(hashBairro.toarray(), columns=['hf0', 'hf1', 'hf2', 'hf3', 'hf4', 'hf5', 'hf6', 'hf7', 'hf8', 'hf9'])

df = df.reset_index()
df = df.join(dfBairro)

#Define pra zero os registros com valor nulo
df.loc[df[df.Confirmados_bairro_14dias.isnull()].index, ['Confirmados_bairro_14dias']] = '0'
df.loc[df[df.Descartados_bairro_14dias.isnull()].index, ['Descartados_bairro_14dias']] = '0'

#Faz o terceiro filtro de colunas
colunas = ['Sexo', 'Data_dos_sintomas', 'Resultado_do_teste', 'Idade', 'Confirmados_bairro_14dias', 
           'Descartados_bairro_14dias', 'hf0', 'hf1', 'hf2', 'hf3', 'hf4', 'hf5', 'hf6', 'hf7', 
           'hf8', 'hf9']
df = df[colunas]
df.head()

#Deixa na base apenas os registros dom 'Resultado do teste' igual a 'confirmado' ou 'descartado'
df = df.drop(df.query('Resultado_do_teste != "confirmado" and Resultado_do_teste != "descartado"').index)

df.to_csv('Dados/covid_ajustado.csv', index=False, header=True)